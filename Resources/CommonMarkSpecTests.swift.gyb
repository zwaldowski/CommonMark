% warning = "This file was automatically generated and should not be edited."
// ${warning}
%{
# encoding=utf8
import sys
reload(sys)
sys.setdefaultencoding('utf8')

import json

def indent(text, amount, ch=' '):
    padding = amount * ch
    return ''.join(padding+line for line in text.splitlines(True))

extNames = {'table': 'tables', 'autolink': 'automaticLinks', 'tasklist': 'taskLists'}
}%

import XCTest
import CommonMark

final class CommonMarkSpec${filename}Tests: XCTestCase {
% with open('../Resources/spec/%s.json' % filename) as file:
    %{ spec = json.load(file) }%
    % for example in spec:
        %{
           number = example['example']
           markdown = example['markdown']
           html = example['html']
           tag_filter = 'tagfilter' in example['extensions']
           extensions = [ext for ext in example['extensions'] if ext != 'tagfilter'] }%
    func testExample${number}() throws {
        let markdown = #######"""
${indent(markdown, 8)}
        """#######

        let expected = #######"""
${indent(html, 8)}
        """#######

        % if extensions:
        var options = Document.ParseOptions()
        % for extension in extensions:
        options.${extNames.get(extension, extension)} = true
        % end
        let document = try Document(markdown, options: options)
        % else:
        let document = try Document(markdown)
        % end
        % if tag_filter:
        let actual = document.render(format: .html, options: .unsafe)
        % else:
        let actual = document.render(format: .html, options: [ .unsafe, .unsafeTags ])
        % end
        XCTAssertEqual(actual, expected)
    }

    % end
% end
}
